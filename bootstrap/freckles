#!/usr/bin/env bash

# Exit codes:
# 2: application configuration error
# 3: execution error somewhere in the bootstrap pipeline
# 6: platform or package manager not supported

if [ ! -z "$FRECKLES_DEBUG" ]; then
    DEBUG=true
fi

if [ "$DEBUG" = true ]; then
    set -x
fi

# event/error handling
declare -A LISTENERS
function throw {
    EVENT=$1; shift; for listener in "${LISTENERS[$EVENT]}"; do eval "$listener $@"; done
}
function addListener {
    if ! test "${LISTENERS['$1']+isset}"; then LISTENERS["$1"]=""; fi
    LISTENERS["$1"]+="$2 " # we can get away with this since functionnames never contain spaces
}
function error_message {
    echo
    exit_code=$1
    shift
    echo " ** $@"
    echo "   Refer to $SCRIPT_LOG_FILE for more details. Exiting..."
    echo
    exit $exit_code
}
function log_message {
    echo "$@" >> "$SCRIPT_LOG_FILE"
}

# convert exitcodes to events
# trap "throw EXIT"    EXIT
# trap "throw SIGINT"  SIGINT
# trap "throw SIGTERM" SIGTERM

addListener VIRTUALENV_ERROR error_message
addListener CONDA_ERROR error_message

# determine whether we run with sudo, or not
if [ "$EUID" != 0 ]; then
    using_sudo=false
    FRECKLES_USER="$USER"
else
    using_sudo=true
    FRECKLES_USER="$SUDO_USER"
fi

# General variables
SCRIPT_LOG_FILE="/tmp/freckles.log"
DEBUG=false

FRECKLES_USER_HOME="`eval echo ~$FRECKLES_USER`"
BASE_DIR="$FRECKLES_USER_HOME/.freckles"
FRECKLES_DATA_DIR="$BASE_DIR/data"
TEMP_DIR="/tmp/freckles_install"

FRECKLES_PATH="$BASE_DIR/bin"

# python/virtualenv related variables
VIRTUALENV_DIR="$FRECKLES_DATA_DIR/venv"
VIRTUALENV_PATH="$VIRTUALENV_DIR/bin"

# nix-related variables
PROOT_DIR="$BASE_DIR/opt/proot"
PROOT_EXE="$PROOT_DIR/proot-x86_64"
NIX_DIR="$BASE_DIR/opt/nix"
NIX_ROOT="$NIX_DIR/root"
NIX_ROOT_INSTALL_SCRIPT="https://raw.githubusercontent.com/makkus/ansible-nix-single/master/files/install_nix.sh"
NIX_NON_ROOT_INSTALL_SCRIPT="https://raw.githubusercontent.com/makkus/ansible-nix-single/master/files/install_nix_proot.sh"
NIX_SRC_STORE_DIR="$BASE_DIR/nix"
NIX_ENV_EXE="$HOME/.nix-profile/bin/nix-env"

# conda related variables
CONDA_DOWNLOAD_URL="https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh"
CONDA_BASE_DIR="$BASE_DIR/opt/conda"
CONDA_PATH="$CONDA_BASE_DIR/bin"
STOW_SRC_DOWNLOAD_URL="http://ftp.gnu.org/gnu/stow/stow-2.2.2.tar.gz"

# deb related variables
DEB_DEPENDENCIES="build-essential git python-dev python-virtualenv libssl-dev libffi-dev stow"

# rpm related variables
RPM_DEPENDENCIES="xxx"

function nix_execute {
    PATH=$NIX_PATH:$PATH $PROOT_EXE -b $NIX_ROOT:/nix $@
}

function command_exists {
    PATH="$PATH:$FRECKLES_PATH" type "$1" > /dev/null 2>&1 ;
}

function download {
    {
    if command_exists wget; then
        wget -O $2 $1
    elif command_exists curl; then
        curl -o $2 $1
    else
        echo "Could not find 'wget' nor 'curl' to download files. Exiting..."
        exit 1
    fi
    } > "$SCRIPT_LOG_FILE"
}

function install_freckles {
    if [ "$1" == true ]; then
        install_freckles_root
    else
        install_freckles_non_root_conda
    fi
}

function create_virtualenv {
    echo "  - creating virtualenv for freckles and installing freckles from pypi"
    {
    su "$FRECKLES_USER" <<EOF
mkdir -p "$FRECKLES_DATA_DIR"
if [ ! -e "$VIRTUALENV_DIR" ]; then
  virtualenv "$VIRTUALENV_DIR"
fi
source "$VIRTUALENV_DIR/bin/activate"
pip install --upgrade pip
pip install --upgrade setuptools wheel
pip install --upgrade requests
pip install --upgrade freckles
EOF
    } > "$SCRIPT_LOG_FILE" 2>&1
}


function install_freckles_deb {
    echo -e "  * Debian-based system detected"
    echo -e "  - Installing dependencies:\n\t$DEB_DEPENDENCIES"
    {
    apt-get update
    apt-get install -y build-essential git python-dev python-virtualenv libssl-dev libffi-dev stow
    } > "$SCRIPT_LOG_FILE" 2>&1
    create_virtualenv || throw VIRTUALENV_ERROR 1 'Error creating virtualenv.'
    link_required_executables "$VIRTUALENV_PATH"
    export PATH="$PATH:$VIRTUALENV_PATH"
}

function install_freckles_rpm {
    echo "  * RedHat-based system detected.\n"
    echo -e "  - Installing dependencies:\n\t$RPM_DEPENDENCIES"
}

function install_freckles_linux_root {
    YUM_CMD=$(which yum)
    APT_GET_CMD=$(which apt-get)
    if [[ ! -z $YUM_CMD ]]; then
        install_freckles_rpm
    elif [[ ! -z $APT_GET_CMD ]]; then
        install_freckles_deb
    else
        echo "Could not find supported package manager. Exiting..."
        exit 6
    fi
}

function install_freckles_root {

    # figure out which os we are running
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        install_freckles_linux_root
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Sorry, MacOS X platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        # POSIX compatibility layer and Linux environment emulation for Windows
        echo "Sorry, Cygwin platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    elif [[ "$OSTYPE" == "msys" ]]; then
        # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
        echo "Sorry, msys/MinGW platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    elif [[ "$OSTYPE" == "win32" ]]; then
        echo "Sorry, win32 platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    elif [[ "$OSTYPE" == "freebsd"* ]]; then
        echo "Sorry, freebsd platform is not supported (at the moment, anyway). Exiting..."
        exit 6
    else
        echo "Could not figure out which platform I'm running on. Exiting..."
        exit 6
    fi
}

function link_path {
    rm -f "$FRECKLES_PATH/$2"
    ln -s "$1/$2" "$FRECKLES_PATH/$2"
}

function link_required_executables {
    link_path "$1" freckles
    link_path "$1" stow
    link_path "$1" git
    link_path "$1" ansible-playbook
    link_path "$1" ansible-galaxy
}

function install_freckles_non_root_conda {
    if [ ! -d "$CONDA_PATH" ]; then
        echo "  * no elevated permissions detected, using conda package manager"
        install_conda_non_root
    fi
    echo "  - installing freckles and its requirements (this will take a bit)"
    {
    conda install -y python=2.7
    conda update -y pip
    conda install -y git
    conda install -y cryptography
    conda config --add channels conda-forge
    conda config --add channels defaults
    conda install -y -c freckles stow || throw CONDA_ERROR 3 "Could not install stow or one of its dependencies via conda."
    pip install freckles
    link_required_executables "$CONDA_PATH"
    } > "$SCRIPT_LOG_FILE" 2>&1
}

function install_conda_non_root {
    echo "  - bootstrapping conda package manager"
    {
    cd "$TEMP_DIR"
    download "$CONDA_DOWNLOAD_URL" "$TEMP_DIR/miniconda.sh"
    } > "$SCRIPT_LOG_FILE" 2>&1
    mkdir -p "$FRECKLES_DATA_DIR"
    echo "  - installing conda"
    {
    bash "$TEMP_DIR/miniconda.sh" -b -p "$CONDA_BASE_DIR"
    export PATH="$CONDA_PATH:$PATH"
    cd "$HOME"
    rm -rf "$TEMP_DIR"
    } > "$SCRIPT_LOG_FILE" 2>&1
}

function install_nix_non_root {
    echo "  - bootstrapping nix package manager for use without root permissions..."
    cd "$TEMP_DIR"
    download "$FRECKLES_NON_ROOT_INSTALL_SCRIPT" "$TEMP_DIR/install.sh"
    chmod +x "$TEMP_DIR/install.sh"
    ./install.sh
    cd "$HOME"
    rm -r "$TEMP_DIR"
}

function install_nix_non_root_src {
    install_nix_non_root
    echo "  - bootstrapping nix package manager from source using nix proot environment..."

    execute bash
    mkdir -p "$NIX_SRC_STORE_DIR"
    nix-channel --update
    NIX_STORE_DIR="$NIX_SRC_STORE_DIR" nix-env -i nix

}

function add_freckles_path {

    if [ -e "$FRECKLES_USER_HOME/.profile" ] && ! grep -q 'load freckles environment' "$FRECKLES_USER_HOME/.profile"; then
       cat <<"EOF" >> "$FRECKLES_USER_HOME/.profile"

# load freckles environment
FRECKLES_PATH="$HOME/.freckles/bin"
if [ -d "$FRECKLES_PATH" ]; then
    PATH="$PATH:$FRECKLES_PATH"
fi
EOF

       echo -e "\nAdded path to freckles bin dir to .profile. You'll need to logout and login again to see the effect. Or you can just execute:\n\n  source $HOME/.profile"

    fi
}

function install_nix_root {
    echo "  - bootstrapping nix package manager (using root to create /nix folder)"
    mkdir -p "/nix"
    chown -R "$FRECKLES_USER" /nix
    download "$FRECKLES_ROOT_INSTALL_SCRIPT" "$TEMP_DIR/install.sh"
    cd "$TEMP_DIR"
    sudo -u "$FRECKLES_USER" bash "$TEMP_DIR/install.sh"
    cd "$HOME"
    rm -r "$TEMP_DIR"
}

############# Start script ##################

# check if freckles is already in the path, if it is, assume everything is bootstrapped
if ! command_exists freckles; then
    mkdir -p "$TEMP_DIR"
    mkdir -p "$FRECKLES_PATH"
    if [ $using_sudo == true ]; then
        chown -R "$FRECKLES_USER" "$BASE_DIR"
        chown -R "$FRECKLES_USER" "$TEMP_DIR"
        chown -R "$FRECKLES_USER" "$FRECKLES_PATH"
    fi

    echo -e "\n'freckles' not found in path, bootstrapping...\n"
    install_freckles "$using_sudo"
    echo
    echo "Bootstrapping finished, running freckles..."
    echo
    add_freckles_path
    echo

fi

if [ $using_sudo == true ]; then
    su "$FRECKLES_USER" -l -c freckles "$@"
else
    PATH="$PATH:$FRECKLES_PATH" freckles "$@"
fi
